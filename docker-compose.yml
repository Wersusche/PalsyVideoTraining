services:
  backend:
    build:
      context: ./backend
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://app:app@db:5432/app}
      PROJECT_NAME: ${PROJECT_NAME:-myapp}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/app
      - media-data:/media
    ports:
      - "8000:8000"
    command: ["/app/start.sh"]

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-app}
      POSTGRES_USER: ${POSTGRES_USER:-app}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-app}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  caddy:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    depends_on:
      backend:
        condition: service_started
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile:ro
      - media-data:/media
      - caddy-data:/data
      - caddy-config:/config

volumes:
  postgres-data:
  media-data:
  caddy-data:
  caddy-config:
